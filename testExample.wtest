import example.*

describe "group of tests for parte 1" {
  const leonardo = new Paciente(edad = 40,nivelDeDolor = 10,nivelDeFortaleza = 20)
  const milena = new Paciente(edad = 3,nivelDeDolor = 30,nivelDeFortaleza = 50)

  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()
  test "Leonardo puede usar los 3 aparatos" {
    assert.that(leonardo.puedeUsar(magneto))
    assert.that(leonardo.puedeUsar(bicicleta))
    assert.that(leonardo.puedeUsar(minitramp))
  }

  test "Milena solo puede usar el magneto"{
    assert.that(milena.puedeUsar(magneto))
    assert.notThat(milena.puedeUsar(bicicleta))
    assert.notThat(milena.puedeUsar(minitramp))
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9"{
    leonardo.usarAparato(magneto)
    assert.equals(9,leonardo.nivelDeDolor())
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27"{
    milena.usarAparato(magneto)
    assert.equals(27,milena.nivelDeDolor())
  }

  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, y la fortaleza sube a 23"{
    leonardo.usarAparato(bicicleta)
    assert.equals(6,leonardo.nivelDeDolor())
    assert.equals(23,leonardo.nivelDeFortaleza())
  }

  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24"{
    leonardo.usarAparato(minitramp)
    assert.equals(24,leonardo.nivelDeFortaleza())
  }
}

describe "group of tests for parte 2" {
  const leonardo = new Paciente(edad = 40,nivelDeDolor = 10,nivelDeFortaleza = 20,rutinaAsignada = [bicicleta,minitramp,bicicleta,magneto])
  const milena = new Paciente(edad = 3,nivelDeDolor = 30,nivelDeFortaleza = 50,rutinaAsignada = [magneto,bicicleta])

  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()

  test "Leonardo puede hacer la rutina Asignada."{
    assert.that(leonardo.puedeHacerLaRutinaAsignada())
  }

  test "Despues de hacerla una vez, su nivel de dolor baja a 1.8 y su fortaleza sube a 27"{
    leonardo.realizarRutinaAsignada()
    assert.equals(30,leonardo.nivelDeFortaleza())
    assert.equals(1.8,leonardo.nivelDeDolor())
  }

  test "Milena no puede hacer la rutina asignada"{
    assert.notThat(milena.puedeHacerLaRutinaAsignada())
  }
}

describe "grupo de test para parte 3"{
  const nicolas = new Resistente(edad = 40,nivelDeDolor = 10,nivelDeFortaleza = 20,rutinaAsignada = [bicicleta,minitramp,bicicleta,magneto])
  const victoria = new Caprichoso(edad = 30,nivelDeDolor = 10,nivelDeFortaleza = 40,rutinaAsignada = [bicicleta,minitramp,bicicleta,magneto])
  const julian = new Caprichoso(edad = 20,nivelDeDolor = 54,nivelDeFortaleza = 50,rutinaAsignada = [bicicletaRoja,magnetoVerde,bicicleta])
  const zoe = new RapidaRecuperacion(edad = 50,nivelDeDolor = 14,nivelDeFortaleza = 40,rutinaAsignada = [bicicleta,minitramp,bicicleta,magneto])

  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()

  const bicicletaRoja = new Bicicleta(color = "rojo")
  const magnetoVerde = new Magneto(color = "verde")

  test "Nicolás puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 1.8, y su fortaleza sube a 34"{
    assert.that(nicolas.puedeHacerLaRutinaAsignada())
    nicolas.realizarRutinaAsignada()
    assert.equals(1.8,nicolas.nivelDeDolor())
    assert.equals(34,nicolas.nivelDeFortaleza())
  }

  test "Victoria no puede hacer la rutina que tiene asignada"{
    assert.notThat(victoria.puedeHacerLaRutinaAsignada())
  }

  test "Julián puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 29.3, y su fortaleza sube a 62"{
    assert.that(julian.puedeHacerLaRutinaAsignada())
    julian.realizarRutinaAsignada()
    assert.equals(29.3,julian.nivelDeDolor())
    assert.equals(62,julian.nivelDeFortaleza())
  }

  test "Zoe puede hacer la rutina que tiene asignada"{
    assert.that(zoe.puedeHacerLaRutinaAsignada())
  }

  test "Después de asignar a 2 el valor de decremento de dolor para pacientes de rápida recuperación, y de que Zoe haga su rutinauna vez, su nivel de dolor baja a 3.4, y su fortaleza sube a 51"{
    zoe.asignarValorDeDecremento(2)
    zoe.realizarRutinaAsignada()
    assert.equals(3.4,zoe.nivelDeDolor())
    assert.equals(51, zoe.nivelDeFortaleza())
  }
}